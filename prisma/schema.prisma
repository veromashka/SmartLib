generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native"]
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String    @id @default(uuid())
  login              String    @unique
  role               Roles     @default(USER)
  email              String    @unique
  password           String
  createdAt          DateTime  @default(now())
  confirmationNumber Int       @default(0)
  expireDate         DateTime?
  confirmationStatus Boolean   @default(false)
  orders             Orders[]
  profile            Profiles?
}

model Orders {
  id        String       @id @default(uuid())
  paid      Boolean
  term      Int
  createdAt DateTime     @default(now())
  finishDate DateTime
  books     BooksOrder[]
  userId    String
  user      Users        @relation(fields: [userId], references: [id])
}

model Profiles {
  id          String @id @default(uuid())
  phoneNumber Int
  age         Int
  name        String
  lastName    String
  country     String
  userId      String @unique
  user        Users  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Books {
  id          String       @id @default(uuid())
  title       String
  price       Int
  currency    Currencies
  author      String
  releaseDate DateTime
  category    Categories   @default(FOR_CHILDREN)
  genre       BookGenres[]
  orders      BooksOrder[]
}

model BooksOrder {
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bookId    String
  orderId   String
  books      Books    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  order     Orders    @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  @@id([orderId, bookId])
}

model Genres {
  id   String       @id @default(uuid())
  name String       @unique
  book BookGenres[]
}

model BookGenres {
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bookId    String
  genreId   String
  book      Books     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  genre     Genres    @relation(fields: [genreId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@id([genreId, bookId])
}

enum Categories {
  FOR_CHILDREN
  FOR_TEENS
  FOR_ADULTS
}

enum Roles {
  USER
  EDITOR
  ADMIN
}

enum Currencies{
  USD
  UAH
  EUR
}
